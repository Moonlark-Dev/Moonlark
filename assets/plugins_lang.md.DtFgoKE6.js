import{_ as s,c as a,o as e,a2 as i}from"./chunks/framework.CBal0aa0.js";const E=JSON.parse('{"title":"LarkLang - 本地化","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/lang.md","filePath":"plugins/lang.md"}'),t={name:"plugins/lang.md"},n=i(`<h1 id="larklang-本地化" tabindex="-1">LarkLang - 本地化 <a class="header-anchor" href="#larklang-本地化" aria-label="Permalink to &quot;LarkLang - 本地化&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>“为了保证一致性，任何可以接入的地方都应该接入本地化。”</p><p>——xxtg666</p></div><blockquote><p>Import 位置: <code>src.plugins.nonebot_plugin_larklang</code></p></blockquote><h2 id="语言操作类-class-langhelper" tabindex="-1">语言操作类 - <code>class LangHelper</code> <a class="header-anchor" href="#语言操作类-class-langhelper" aria-label="Permalink to &quot;语言操作类 - \`class LangHelper\`&quot;">​</a></h2><h3 id="def-init-self-name-str-none" tabindex="-1"><code>def __init__(self, name: str = &quot;&quot;) -&gt; None</code> <a class="header-anchor" href="#def-init-self-name-str-none" aria-label="Permalink to &quot;\`def __init__(self, name: str = &quot;&quot;) -&gt; None\`&quot;">​</a></h3><blockquote><p>此方法为<strong>魔法方法</strong></p></blockquote><p>初始化一个 <code>LangHelper</code> 对象。</p><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>name</code>: 插件名，对应 LarkLang 三级键中的第一级，为空时将自动从插件名获取（为插件名去掉 <code>nonebot_plugin_</code> 前缀）。</li></ul><h4 id="返回" tabindex="-1">返回 <a class="header-anchor" href="#返回" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>None</code></p><h4 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h4><ul><li><code>src.plugins.nonebot_plugin_larklang.exceptions.InvalidPluginNameException</code>: 获取插件名失败，且 <code>name</code> 参数为空。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>InvalidPluginNameException</code> 异常很少出现，一般来说不用处理，必要时手动传入 <code>name</code> 参数就可以了。</p></div><h3 id="async-def-text-self-key-str-user-id-str-int-args-kwargs-str" tabindex="-1"><code>async def text(self, key: str, user_id: str | int, *args, **kwargs) -&gt; str</code> <a class="header-anchor" href="#async-def-text-self-key-str-user-id-str-int-args-kwargs-str" aria-label="Permalink to &quot;\`async def text(self, key: str, user_id: str | int, *args, **kwargs) -&gt; str\`&quot;">​</a></h3><p>获取指定键的本地化文本。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>YAML 支持多行字符串，尽量不要在代码中按行进行拆分或拼接。</p></div><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ol><li><code>key</code>: 键名，为 <code>xxx2.xxx3</code> 格式的字符串。</li><li><code>user_id</code>: 触发事件用户的 ID，未知时可填 <code>-1</code>。</li></ol><p><code>args</code> 和 <code>kwargs</code> 会直接被解包入 <code>format</code> 函数中。</p><h4 id="返回-1" tabindex="-1">返回 <a class="header-anchor" href="#返回-1" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>str</code> - 经过本地化的文本。</p><h3 id="async-def-is-key-exists-self-key-str-user-id-str-int-bool" tabindex="-1"><code>async def is_key_exists(self, key: str, user_id: str | int) -&gt; bool</code> <a class="header-anchor" href="#async-def-is-key-exists-self-key-str-user-id-str-int-bool" aria-label="Permalink to &quot;\`async def is_key_exists(self, key: str, user_id: str | int) -&gt; bool\`&quot;">​</a></h3><p>检查当前语言库中是否能够获取指定键。</p><h3 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ol><li><code>key</code>: 键名，为 <code>xxx2.xxx3</code> 格式的字符串。</li><li><code>user_id</code>: 用户 ID。</li></ol><h3 id="async-def-send-self-key-str-user-id-str-int-args-matcher-matcher-matcher-at-sender-bool-true-reply-message-bool-false-kwargs-none" tabindex="-1"><code>async def send(self, key: str, user_id: str | int, *args, matcher: Matcher = Matcher(), at_sender: bool = True, reply_message: bool = False, **kwargs) -&gt; None</code> <a class="header-anchor" href="#async-def-send-self-key-str-user-id-str-int-args-matcher-matcher-matcher-at-sender-bool-true-reply-message-bool-false-kwargs-none" aria-label="Permalink to &quot;\`async def send(self, key: str, user_id: str | int, *args, matcher: Matcher = Matcher(), at_sender: bool = True, reply_message: bool = False, **kwargs) -&gt; None\`&quot;">​</a></h3><p>向当前事件响应会话发送文本。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>假设 <code>matcher</code> 是一个 <code>Matcher</code>，<code>lang</code> 是一个 <code>LangHelper</code>，<code>user_id</code> 为一个用户 ID 字符串，那么此时：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matcher.send(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa.bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">at_sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>和</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa.bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id)</span></span></code></pre></div><p>等效。</p></div><h4 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ol><li><code>key</code>: 本地化键名，为 <code>xxx2.xxx3</code> 格式的字符串。</li><li><code>user_id</code>: 用户 ID。</li><li><code>matcher</code>: 对应事件的事件响应器。</li><li><code>at_sender</code>: 是否在消息的开头提及发送者。</li><li><code>reply_message</code>: 是否回复对应消息。</li></ol><p><code>args</code> 和 <code>kwargs</code> 参数会被解包到 <code>lang.text</code> 中。</p><h4 id="返回-2" tabindex="-1">返回 <a class="header-anchor" href="#返回-2" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>None</code></p><h4 id="异常-1" tabindex="-1">异常 <a class="header-anchor" href="#异常-1" aria-label="Permalink to &quot;异常&quot;">​</a></h4><p>与 <code>Matcher().send</code> 可能出现的异常相同（<code>ActionFailed</code> 或 <code>NetworkError</code>）。</p><h3 id="async-def-finish-self-key-str-user-id-str-int-args-matcher-matcher-matcher-at-sender-bool-true-reply-message-bool-false-kwargs-none" tabindex="-1"><code>async def finish(self, key: str, user_id: str | int, *args, matcher: Matcher = Matcher(), at_sender: bool = True, reply_message: bool = False, **kwargs) -&gt; None</code> <a class="header-anchor" href="#async-def-finish-self-key-str-user-id-str-int-args-matcher-matcher-matcher-at-sender-bool-true-reply-message-bool-false-kwargs-none" aria-label="Permalink to &quot;\`async def finish(self, key: str, user_id: str | int, *args, matcher: Matcher = Matcher(), at_sender: bool = True, reply_message: bool = False, **kwargs) -&gt; None\`&quot;">​</a></h3><p>发送一条本地化消息并结束事件响应器。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>假设 <code>matcher</code> 是一个 <code>Matcher</code>，<code>lang</code> 是一个 <code>LangHelper</code>，<code>user_id</code> 为一个用户 ID 字符串，那么此时：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matcher.finish(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa.bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">at_sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>和</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.finish(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa.bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id)</span></span></code></pre></div><p>等效。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>此方法会抛出 <code>FinishedException</code> 并结束当前事件响应。</p></div><h4 id="参数-4" tabindex="-1">参数 <a class="header-anchor" href="#参数-4" aria-label="Permalink to &quot;参数&quot;">​</a></h4><p>与 <code>LangHelper().send</code> 相同。</p><h4 id="返回-3" tabindex="-1">返回 <a class="header-anchor" href="#返回-3" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>None</code></p><h4 id="异常-2" tabindex="-1">异常 <a class="header-anchor" href="#异常-2" aria-label="Permalink to &quot;异常&quot;">​</a></h4><p>除 <code>Matcher().send</code> 可能出现的异常外，正常执行时将抛出 <code>FinishedException</code>。</p><h3 id="async-def-reply-self-key-str-user-id-str-int-args-kwargs-none" tabindex="-1"><code>async def reply(self, key: str, user_id: str | int, *args, **kwargs) -&gt; None</code> <a class="header-anchor" href="#async-def-reply-self-key-str-user-id-str-int-args-kwargs-none" aria-label="Permalink to &quot;\`async def reply(self, key: str, user_id: str | int, *args, **kwargs) -&gt; None\`&quot;">​</a></h3><p>回复消息。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>假设 <code>lang</code> 为 <code>LangHelper</code>，<code>user_id</code> 为用户 ID，那么：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx2.xxx3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reply_message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">at_sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>和</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.reply(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx2.xxx3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id)</span></span></code></pre></div><p>等效。</p></div><h4 id="参数-5" tabindex="-1">参数 <a class="header-anchor" href="#参数-5" aria-label="Permalink to &quot;参数&quot;">​</a></h4><p>与 <code>LangHelper().text</code> 相同。</p><h4 id="返回-4" tabindex="-1">返回 <a class="header-anchor" href="#返回-4" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>None</code></p><h4 id="异常-3" tabindex="-1">异常 <a class="header-anchor" href="#异常-3" aria-label="Permalink to &quot;异常&quot;">​</a></h4><p>与 <code>LangHelper().send</code> 相同。</p><h2 id="使用-langhelper" tabindex="-1">使用 <code>LangHelper</code> <a class="header-anchor" href="#使用-langhelper" aria-label="Permalink to &quot;使用 \`LangHelper\`&quot;">​</a></h2><p>在插件中使用以下方法初始化一个 <code>LangHelper</code>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot_plugin_larklang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LangHelper</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LangHelper()</span></span></code></pre></div><p>假设插件名为 <code>nonebot_plugin_test</code>，此时 LangHelper 的一级键将被绑定为 <code>test</code>。</p><h2 id="键" tabindex="-1">键 <a class="header-anchor" href="#键" aria-label="Permalink to &quot;键&quot;">​</a></h2><h3 id="键名组成" tabindex="-1">键名组成 <a class="header-anchor" href="#键名组成" aria-label="Permalink to &quot;键名组成&quot;">​</a></h3><p>LarkLang 的键名结构由三级组成。</p><h4 id="一级-插件名" tabindex="-1">一级 - 插件名 <a class="header-anchor" href="#一级-插件名" aria-label="Permalink to &quot;一级 - 插件名&quot;">​</a></h4><p>此键会被映射到具体的文件名上，如 <code>test</code> 对应 <code>src/lang/...(具体的语言)/test.yaml</code>，一般为插件名，不包含 <code>nonebot_plugin_</code> 前缀。</p><h4 id="二级-场景" tabindex="-1">二级 - 场景 <a class="header-anchor" href="#二级-场景" aria-label="Permalink to &quot;二级 - 场景&quot;">​</a></h4><p>如指令名、<code>help</code> 或其他命名，对应 yaml 文件中的第一级。</p><h4 id="三级-具体键名" tabindex="-1">三级 - 具体键名 <a class="header-anchor" href="#三级-具体键名" aria-label="Permalink to &quot;三级 - 具体键名&quot;">​</a></h4><p>具体的键名，对应 yaml 文件中的第二级。</p><h3 id="键名使用" tabindex="-1">键名使用 <a class="header-anchor" href="#键名使用" aria-label="Permalink to &quot;键名使用&quot;">​</a></h3><p>一级键名会在 <code>LangHelper</code> 被实例化时直接绑定在该类上。</p><p>二级、三级一般组合书写出现在 <code>key</code> 参数中，使用 <code>.</code> 链接。</p><h3 id="文件对应" tabindex="-1">文件对应 <a class="header-anchor" href="#文件对应" aria-label="Permalink to &quot;文件对应&quot;">​</a></h3><p>语言键文件位于 <code>src/lang/(具体语言)/(一级键名).yaml</code>，是 yaml 文件，使用 yaml 格式。</p><p>这是我们在 <a href="./../quick-start/first-plugin.html">快速开始</a> 中创建的语言键文件，其一级键为 <code>sha1</code>，二三级键如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sha1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # sha1.sha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  sha1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;消息文本的 SHA1 摘要为: {}&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">help</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # help.description</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SHA1 摘要计算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # help.details</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  details</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">计算文本的 SHA1 摘要</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # help.usage</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  usage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sha1 &lt;内容&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如图所示的所有占位符都使用 Python3 中字符串的 <code>format</code> 方法进行替换。</p></div><h2 id="键的进阶写法" tabindex="-1">键的进阶写法 <a class="header-anchor" href="#键的进阶写法" aria-label="Permalink to &quot;键的进阶写法&quot;">​</a></h2><p>对于每个键，最常见的是直接使用字符串的缩略写法，以上文 <code>sha1.sha1</code> 为例，完整写法如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sha1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  sha1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - \`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">消息文本的 SHA1 摘要为</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}\`</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    use_template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>由此可见，一个键由一个包含 <code>text</code> 和 <code>use_template</code> 字段的 <code>dict</code> 组成。</p><h3 id="字典键含义" tabindex="-1">字典键含义 <a class="header-anchor" href="#字典键含义" aria-label="Permalink to &quot;字典键含义&quot;">​</a></h3><ul><li><code>text</code>: 具体的文本，每次获取时都将在所有项目中随机一个。</li><li><code>use_template</code>: 是否使用模板</li></ul><h3 id="模板键" tabindex="-1">模板键 <a class="header-anchor" href="#模板键" aria-label="Permalink to &quot;模板键&quot;">​</a></h3><p>模板键的三级键名为 <code>__template__</code>，对应二级键名下所有 <code>use_tempalte</code> 为 <code>True</code> 的键都会应用该模板。</p><p>应用模板操作在 <code>format</code> 之前，所有模板键的 <code>use_template</code> 选项将被忽略。</p><h4 id="写法" tabindex="-1">写法 <a class="header-anchor" href="#写法" aria-label="Permalink to &quot;写法&quot;">​</a></h4><p>任何模板键都要包含一个 <code>{}</code> 占位符，对应文本将替换掉此占位符。</p><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>设置以下键：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  __template__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;so F**k you, {}!&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nvidia</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 将应用模板</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置了 use_template 不会应用模板</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">XiaoDeng3386</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    use_template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxtg666</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 不是同一个二级键名，不会应用模板</span></span></code></pre></div><p>此时对应键的值如下：</p><ul><li><code>hello.name</code>: so F**k you，nvidia!</li><li><code>hello.name_1</code>: XiaoDeng3386</li><li><code>names.name</code>: xxtg666</li></ul><h3 id="列表写法" tabindex="-1">列表写法 <a class="header-anchor" href="#列表写法" aria-label="Permalink to &quot;列表写法&quot;">​</a></h3><p>键还支持以下写法，相当于 <code>text</code> 选项：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  meow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">喵~</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">喵！</span></span></code></pre></div><h2 id="语言配置文件" tabindex="-1">语言配置文件 <a class="header-anchor" href="#语言配置文件" aria-label="Permalink to &quot;语言配置文件&quot;">​</a></h2><p>这是 <code>zh_hans</code> 的配置文件，位于 <code>src/lang/zh_hans/language.toml</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">language</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;latest&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">author = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Moonlark-Dev&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">description=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Moonlark 默认语言，简体中文&quot;</span></span></code></pre></div><p>通过指令 <code>lang view zh_hans</code> 我们可以很清晰地看到每个键的含义：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>「语言详细信息」</span></span>
<span class="line"><span>名称: zh_hans</span></span>
<span class="line"><span>作者: Moonlark-Dev</span></span>
<span class="line"><span>版本: latest</span></span>
<span class="line"><span>Moonlark 默认语言，简体中文</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>language.toml</code> 有很多保留键，由于这些键名未实现或未测试，这里不做过多说明。</p></div>`,101),l=[n];function h(p,d,o,r,c,k){return e(),a("div",null,l)}const u=s(t,[["render",h]]);export{E as __pageData,u as default};
