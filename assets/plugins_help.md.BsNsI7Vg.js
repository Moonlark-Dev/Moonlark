import{_ as a,c as e,o as i,a2 as l}from"./chunks/framework.Sicmpk4x.js";const b=JSON.parse('{"title":"Help","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/help.md","filePath":"plugins/help.md"}'),s={name:"plugins/help.md"},o=l('<h1 id="help" tabindex="-1">Help <a class="header-anchor" href="#help" aria-label="Permalink to &quot;Help&quot;">​</a></h1><blockquote><p>此章节主要包含 LarkHelp 支持的插件帮助的编写方法，可以参考 <a href="https://github.com/Moonlark-Dev/Moonlark/blob/main/src/plugins/nonebot_plugin_extrahelp/help.yaml" target="_blank" rel="noreferrer">此文件</a> 阅读。</p></blockquote><h2 id="位置" tabindex="-1">位置 <a class="header-anchor" href="#位置" aria-label="Permalink to &quot;位置&quot;">​</a></h2><p>帮助文件位于插件根目录的 <code>help.yaml</code> 文件。</p><h2 id="结构" tabindex="-1">结构 <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构&quot;">​</a></h2><ul><li><code>plugin</code>: 本地化插件名</li><li><code>commands</code>: 命令列表 <ul><li><code>&lt;指令名&gt;</code>: 具体命令帮助 <ul><li><code>description</code>: 简介</li><li><code>details</code>: 详细说明</li><li><code>usages</code>: 用法列表（<code>list[str]</code>）</li></ul></li><li>……</li></ul></li></ul><h2 id="本地化" tabindex="-1">本地化 <a class="header-anchor" href="#本地化" aria-label="Permalink to &quot;本地化&quot;">​</a></h2><p>每个命令下的 <code>description</code>、<code>details</code>、<code>usages</code>(的内容) 都是本地化键名，为 <code>xxx2.xxx3</code> 的格式，二级键一般为 <code>help</code>。</p><h2 id="用法编写规范" tabindex="-1">用法编写规范 <a class="header-anchor" href="#用法编写规范" aria-label="Permalink to &quot;用法编写规范&quot;">​</a></h2><p>基本格式如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">指令名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">子命</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">令</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">args..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">说明</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="指令名" tabindex="-1">指令名 <a class="header-anchor" href="#指令名" aria-label="Permalink to &quot;指令名&quot;">​</a></h3><p>与对应的父键相同。</p><h3 id="子命令" tabindex="-1">子命令 <a class="header-anchor" href="#子命令" aria-label="Permalink to &quot;子命令&quot;">​</a></h3><p>有多个子命令的指令应将每个子命令的用法拆分。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>假设 <code>hello</code> 指令下有 <code>x1</code> 和 <code>x2</code> 两个子指令（均没有参数），那么 <code>hello</code> 的用法应该拆分成如下两条：</p><ol><li><code>hello x1</code></li><li><code>hello x2</code></li></ol></div><h3 id="选择参数" tabindex="-1">选择参数 <a class="header-anchor" href="#选择参数" aria-label="Permalink to &quot;选择参数&quot;">​</a></h3><p>除选项缩写外，选择参数应当使用花括号（<code>{...}</code>）包围，不同选项使用 <code>|</code> 分割。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我们推荐将选择参数拆分成多个用法，并给予独立说明。</p></div><h3 id="必要参数" tabindex="-1">必要参数 <a class="header-anchor" href="#必要参数" aria-label="Permalink to &quot;必要参数&quot;">​</a></h3><p>使用 <code>&lt;...&gt;</code> 包围，中间写参数说明。</p><h3 id="可选参数" tabindex="-1">可选参数 <a class="header-anchor" href="#可选参数" aria-label="Permalink to &quot;可选参数&quot;">​</a></h3><p>使用 <code>[...]</code> 包围，中间写参数说明</p><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p>用法的用途，在指令只有一个用法的情况下可不注明。</p>',25),t=[o];function h(d,c,r,n,p,k){return i(),e("div",null,t)}const g=a(s,[["render",h]]);export{b as __pageData,g as default};
