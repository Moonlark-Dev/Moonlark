import{_ as e,c as s,o as i,ae as t}from"./chunks/framework.BHrE6nLq.js";const k=JSON.parse('{"title":"Render","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/render.md","filePath":"plugins/render.md"}'),l={name:"plugins/render.md"};function d(n,a,o,r,c,h){return i(),s("div",null,a[0]||(a[0]=[t(`<h1 id="render" tabindex="-1">Render <a class="header-anchor" href="#render" aria-label="Permalink to &quot;Render&quot;">​</a></h1><blockquote><p>Import 位置: <code>src.plugins.nonebot_plugin_render</code></p></blockquote><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><h3 id="async-def-render-template-name-str-title-str-user-id-str-templates-dict-bytes" tabindex="-1"><code>async def render_template(name: str, title: str, user_id: str, templates: dict) -&gt; bytes</code> <a class="header-anchor" href="#async-def-render-template-name-str-title-str-user-id-str-templates-dict-bytes" aria-label="Permalink to &quot;\`async def render_template(name: str, title: str, user_id: str, templates: dict) -&gt; bytes\`&quot;">​</a></h3><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>name</code> (str): 模板名称</li><li><code>title</code> (str): 标题</li><li><code>user_id</code> (str): 用户ID</li><li><code>templates</code> (dict): 模板变量</li></ul><h4 id="返回" tabindex="-1">返回 <a class="header-anchor" href="#返回" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>bytes</code>: 渲染后的图片</p><h2 id="模板编写" tabindex="-1">模板编写 <a class="header-anchor" href="#模板编写" aria-label="Permalink to &quot;模板编写&quot;">​</a></h2><p>Render 读取的模板储存在 <code>src/templates</code> 中，后缀为 <code>*.jinja</code>。</p><p>一个模板的格式如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% extends base %}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% block body %}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ content }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% endblock body %}</span></span></code></pre></div><h3 id="基模板" tabindex="-1">基模板 <a class="header-anchor" href="#基模板" aria-label="Permalink to &quot;基模板&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% extends base %}</span></span></code></pre></div><p>这里使用了一个模板变量 <code>base</code> 作为基模板的名称，这个变量在渲染时会自动填充为对应主题的基模板。</p><h3 id="内容块" tabindex="-1">内容块 <a class="header-anchor" href="#内容块" aria-label="Permalink to &quot;内容块&quot;">​</a></h3><h4 id="header" tabindex="-1"><code>header</code> <a class="header-anchor" href="#header" aria-label="Permalink to &quot;\`header\`&quot;">​</a></h4><p>拓展页面页面的头部。</p><h4 id="body" tabindex="-1"><code>body</code> <a class="header-anchor" href="#body" aria-label="Permalink to &quot;\`body\`&quot;">​</a></h4><p>卡片主体内容。</p><h4 id="card" tabindex="-1"><code>card</code> <a class="header-anchor" href="#card" aria-label="Permalink to &quot;\`card\`&quot;">​</a></h4><p>卡片。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>此块会覆盖 <code>body</code> 块。</p></div><h3 id="保留变量" tabindex="-1">保留变量 <a class="header-anchor" href="#保留变量" aria-label="Permalink to &quot;保留变量&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>这些变量会在渲染时被自动填充，请避免使用这些模板变量名。</p></div><ul><li><code>base</code>: 主题基模板的相对路径。</li><li><code>main_title</code>: 页面主标题。</li><li><code>footer</code>: 页面页脚（版权信息）。</li></ul><h2 id="主题" tabindex="-1">主题 <a class="header-anchor" href="#主题" aria-label="Permalink to &quot;主题&quot;">​</a></h2><p>Render 支持主题，主题基模板储存在 <code>src/templates/base</code> 中，主题列表储存在 <code>src/plugins/nonebot_plugin_render/themes.json</code> 中。</p><h3 id="基模板-1" tabindex="-1">基模板 <a class="header-anchor" href="#基模板-1" aria-label="Permalink to &quot;基模板&quot;">​</a></h3><p>一个主题的基模板需要定义以下变量和内容块：</p><h4 id="模板变量" tabindex="-1">模板变量 <a class="header-anchor" href="#模板变量" aria-label="Permalink to &quot;模板变量&quot;">​</a></h4><ul><li><code>main_title</code>: 页面主标题。</li><li><code>footer</code>: 页面页脚（版权信息）。</li></ul><h4 id="内容块-1" tabindex="-1">内容块 <a class="header-anchor" href="#内容块-1" aria-label="Permalink to &quot;内容块&quot;">​</a></h4><ul><li><code>header</code>: 页面拓展头部。</li><li><code>body</code>: 卡片主体内容。</li><li><code>card</code>: 卡片。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>一般来说，<code>card</code> 会覆盖 <code>body</code> 块。</p></div><h3 id="主题配置" tabindex="-1">主题配置 <a class="header-anchor" href="#主题配置" aria-label="Permalink to &quot;主题配置&quot;">​</a></h3><p>主题配置是一个 JSON 文件，格式为 <code>&quot;主题ID&quot;: &quot;主题模板相对于 src/templates 的路径&quot;</code>。</p><h2 id="本地化" tabindex="-1">本地化 <a class="header-anchor" href="#本地化" aria-label="Permalink to &quot;本地化&quot;">​</a></h2><p>所有向用户展示的文本都要被本地化。</p><h2 id="本地文件引用" tabindex="-1">本地文件引用 <a class="header-anchor" href="#本地文件引用" aria-label="Permalink to &quot;本地文件引用&quot;">​</a></h2><p>可以使用 <code>{% include &quot;xx&quot; %}</code> 块或 <code>src=xxx</code> 引入本地文件。 使用相对引入时，基路径为 <code>src/templates</code>。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>这是 Boothill 插件中渲染的代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render_template(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;boothill.html.jinja&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>render_template</code> 函数会自动根据用户加载主题配置，并渲染模板。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Render 插件的 Jinja2 配置会转义模板变量的所有 HTML 标记。</p></div>`,46)]))}const u=e(l,[["render",d]]);export{k as __pageData,u as default};
