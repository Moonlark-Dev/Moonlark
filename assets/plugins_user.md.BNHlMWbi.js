import{_ as e,c as a,o as t,a2 as o}from"./chunks/framework.Sicmpk4x.js";const g=JSON.parse('{"title":"LarkUser","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/user.md","filePath":"plugins/user.md"}'),i={name:"plugins/user.md"},s=o('<h1 id="larkuser" tabindex="-1">LarkUser <a class="header-anchor" href="#larkuser" aria-label="Permalink to &quot;LarkUser&quot;">​</a></h1><blockquote><p>Import 位置: <code>src.plugins.nonebot_plugin_larkuser</code></p></blockquote><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><h3 id="class-moonlarkuser" tabindex="-1"><code>class MoonlarkUser</code> <a class="header-anchor" href="#class-moonlarkuser" aria-label="Permalink to &quot;`class MoonlarkUser`&quot;">​</a></h3><h4 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h4><h5 id="def-init-self-user-id-str-none" tabindex="-1"><code>def __init__(self, user_id: str) -&gt; None</code> <a class="header-anchor" href="#def-init-self-user-id-str-none" aria-label="Permalink to &quot;`def __init__(self, user_id: str) -&gt; None`&quot;">​</a></h5><blockquote><p>此方法为 Python3 <strong>魔法方法</strong></p></blockquote><p>获取指定用户的 Moonlark User 对象。</p><h6 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h6><ul><li><code>user_id</code> (str): 用户 ID</li></ul><h5 id="async-def-setup-user-self-none" tabindex="-1"><code>async def setup_user(self) -&gt; None</code> <a class="header-anchor" href="#async-def-setup-user-self-none" aria-label="Permalink to &quot;`async def setup_user(self) -&gt; None`&quot;">​</a></h5><p>从数据库中更新用户数据。</p><h5 id="def-get-nickname-self-str" tabindex="-1"><code>def get_nickname(self) -&gt; str</code> <a class="header-anchor" href="#def-get-nickname-self-str" aria-label="Permalink to &quot;`def get_nickname(self) -&gt; str`&quot;">​</a></h5><p>获取用户昵称。</p><h5 id="def-is-main-account-self-bool" tabindex="-1"><code>def is_main_account(self) -&gt; bool</code> <a class="header-anchor" href="#def-is-main-account-self-bool" aria-label="Permalink to &quot;`def is_main_account(self) -&gt; bool`&quot;">​</a></h5><p>用户是否为主帐号。</p><h5 id="def-get-avatar-self-optional-bytes" tabindex="-1"><code>def get_avatar(self) -&gt; Optional[bytes]</code> <a class="header-anchor" href="#def-get-avatar-self-optional-bytes" aria-label="Permalink to &quot;`def get_avatar(self) -&gt; Optional[bytes]`&quot;">​</a></h5><p>获取二进制用户头像。</p><h5 id="def-get-base64-avatar-self-optional-str" tabindex="-1"><code>def get_base64_avatar(self) -&gt; Optional[str]</code> <a class="header-anchor" href="#def-get-base64-avatar-self-optional-str" aria-label="Permalink to &quot;`def get_base64_avatar(self) -&gt; Optional[str]`&quot;">​</a></h5><p>获取 Base64 编码的用户头像。</p><h5 id="def-has-avatar-self-bool" tabindex="-1"><code>def has_avatar(self) -&gt; bool</code> <a class="header-anchor" href="#def-has-avatar-self-bool" aria-label="Permalink to &quot;`def has_avatar(self) -&gt; bool`&quot;">​</a></h5><p>用户数据中是否有头像，为 False 时 <code>get_avatar</code> 和 <code>get_base64_avatar</code> 会返回 <code>None</code>。</p><h5 id="def-get-fav-self-float" tabindex="-1"><code>def get_fav(self) -&gt; float</code> <a class="header-anchor" href="#def-get-fav-self-float" aria-label="Permalink to &quot;`def get_fav(self) -&gt; float`&quot;">​</a></h5><p>获取好感度。</p><h5 id="def-get-vimcoin-self-float" tabindex="-1"><code>def get_vimcoin(self) -&gt; float</code> <a class="header-anchor" href="#def-get-vimcoin-self-float" aria-label="Permalink to &quot;`def get_vimcoin(self) -&gt; float`&quot;">​</a></h5><p>获取用户拥有的 VimCoin 数量。</p><h5 id="def-get-health-self-float" tabindex="-1"><code>def get_health(self) -&gt; float</code> <a class="header-anchor" href="#def-get-health-self-float" aria-label="Permalink to &quot;`def get_health(self) -&gt; float`&quot;">​</a></h5><p>获取用户血量。</p><h5 id="def-get-gender-self-optional-bool" tabindex="-1"><code>def get_gender(self) -&gt; Optional[bool]</code> <a class="header-anchor" href="#def-get-gender-self-optional-bool" aria-label="Permalink to &quot;`def get_gender(self) -&gt; Optional[bool]`&quot;">​</a></h5><p>获取用户性别。<code>True</code> 为男性，<code>False</code> 为女性，<code>None</code> 为用户未注册。</p><h5 id="def-get-experience-self-int" tabindex="-1"><code>def get_experience(self) -&gt; int</code> <a class="header-anchor" href="#def-get-experience-self-int" aria-label="Permalink to &quot;`def get_experience(self) -&gt; int`&quot;">​</a></h5><p>获取用户的经验值（总经验）。</p><h5 id="def-get-register-time-self-optional-datetime" tabindex="-1"><code>def get_register_time(self) -&gt; Optional[datetime]</code> <a class="header-anchor" href="#def-get-register-time-self-optional-datetime" aria-label="Permalink to &quot;`def get_register_time(self) -&gt; Optional[datetime]`&quot;">​</a></h5><p>获取用户注册时间，<code>None</code> 为未注册。</p><h5 id="def-get-ship-code-self-optional-str" tabindex="-1"><code>def get_ship_code(self) -&gt; Optional[str]</code> <a class="header-anchor" href="#def-get-ship-code-self-optional-str" aria-label="Permalink to &quot;`def get_ship_code(self) -&gt; Optional[str]`&quot;">​</a></h5><p>获取用户舰船代号，<code>None</code> 为未注册。</p><h5 id="def-get-level-self-int" tabindex="-1"><code>def get_level(self) -&gt; int</code> <a class="header-anchor" href="#def-get-level-self-int" aria-label="Permalink to &quot;`def get_level(self) -&gt; int`&quot;">​</a></h5><p>获取用户等级。</p><h5 id="def-is-registered-self-bool" tabindex="-1"><code>def is_registered(self) -&gt; bool</code> <a class="header-anchor" href="#def-is-registered-self-bool" aria-label="Permalink to &quot;`def is_registered(self) -&gt; bool`&quot;">​</a></h5><p>用户是否注册。为 <code>False</code> 时 <code>get_register_time</code> <code>get_gender</code> <code>get_ship_code</code> 会返回 <code>None</code>。</p><h5 id="async-def-set-data-self-user-id-str-experience-optional-int-none-vimcoin-optional-float-none-health-optional-float-none-favorability-optional-float-none-none" tabindex="-1"><code>async def set_data(self, user_id: str, experience: Optional[int] = None, vimcoin: Optional[float] = None, health: Optional[float] = None, favorability: Optional[float] = None) -&gt; None</code> <a class="header-anchor" href="#async-def-set-data-self-user-id-str-experience-optional-int-none-vimcoin-optional-float-none-health-optional-float-none-favorability-optional-float-none-none" aria-label="Permalink to &quot;`async def set_data(self, user_id: str, experience: Optional[int] = None, vimcoin: Optional[float] = None, health: Optional[float] = None, favorability: Optional[float] = None) -&gt; None`&quot;">​</a></h5><p>修改用户数据（对于大部分数据都有提供独立方法，避免使用此方法修改）。</p><h5 id="async-def-add-fav-self-count-float-none" tabindex="-1"><code>async def add_fav(self, count: float) -&gt; None</code> <a class="header-anchor" href="#async-def-add-fav-self-count-float-none" aria-label="Permalink to &quot;`async def add_fav(self, count: float) -&gt; None`&quot;">​</a></h5><p>增加好感度。</p><h5 id="async-def-add-experience-self-count-int-none" tabindex="-1"><code>async def add_experience(self, count: int) -&gt; None</code> <a class="header-anchor" href="#async-def-add-experience-self-count-int-none" aria-label="Permalink to &quot;`async def add_experience(self, count: int) -&gt; None`&quot;">​</a></h5><p>增加经验值。</p><h5 id="async-def-add-vimcoin-self-count-float-none" tabindex="-1"><code>async def add_vimcoin(self, count: float) -&gt; None</code> <a class="header-anchor" href="#async-def-add-vimcoin-self-count-float-none" aria-label="Permalink to &quot;`async def add_vimcoin(self, count: float) -&gt; None`&quot;">​</a></h5><p>增加 VimCoin 数量。</p><h5 id="async-def-use-vimcoin-self-count-float-none" tabindex="-1"><code>async def use_vimcoin(self, count: float) -&gt; None</code> <a class="header-anchor" href="#async-def-use-vimcoin-self-count-float-none" aria-label="Permalink to &quot;`async def use_vimcoin(self, count: float) -&gt; None`&quot;">​</a></h5><p>减少 VimCoin 数量。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>此方法不包含 VimCoin 余额检查，请自行检查余额。</p></div><h5 id="async-def-has-vimcoin-self-count-float-bool" tabindex="-1"><code>async def has_vimcoin(self, count: float) -&gt; bool</code> <a class="header-anchor" href="#async-def-has-vimcoin-self-count-float-bool" aria-label="Permalink to &quot;`async def has_vimcoin(self, count: float) -&gt; bool`&quot;">​</a></h5><p>检查 VimCoin 数量是否足够。</p><h6 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h6><ul><li><code>count</code>(int): 需要的数量。</li></ul><h4 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h4><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>大部分属性都是只读的，请尽量使用方法读取或修改数据。</p></div><ul><li><code>user_id</code> (str): 用户 ID。</li><li><code>nickname</code> (str): 用户昵称。</li><li><code>register_time</code> (<code>Optional[datetime]</code>): 注册时间。</li><li><code>ship_code</code> (<code>Optional[str]</code>): 用户舰船代号。</li><li><code>gender</code> (<code>Optional[bool]</code>): 用户性别。</li><li><code>vimcoin</code> (float): VimCoin 数量。</li><li><code>experience</code> (int): 经验值。</li><li><code>health</code> (float): 血量。</li><li><code>fav</code> (float): 好感度。</li><li><code>avatar</code> (<code>Optional[bytes]</code>): 用户头像。</li><li><code>main_account</code> (bool): 用户帐号是否为主帐号。</li></ul><h3 id="async-def-get-user-user-id-str-moonlarkuser" tabindex="-1"><code>async def get_user(user_id: str) -&gt; MoonlarkUser</code> <a class="header-anchor" href="#async-def-get-user-user-id-str-moonlarkuser" aria-label="Permalink to &quot;`async def get_user(user_id: str) -&gt; MoonlarkUser`&quot;">​</a></h3><p>获取 Moonlark 用户。</p><h4 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>user_id</code> (str): 用户 ID。</li></ul><h4 id="返回" tabindex="-1">返回 <a class="header-anchor" href="#返回" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p>可操作 Moonlark 用户类。</p><h3 id="def-patch-matcher-matcher-type-matcher-type-matcher" tabindex="-1"><code>def patch_matcher(matcher: type[Matcher]) -&gt; type[Matcher]</code> <a class="header-anchor" href="#def-patch-matcher-matcher-type-matcher-type-matcher" aria-label="Permalink to &quot;`def patch_matcher(matcher: type[Matcher]) -&gt; type[Matcher]`&quot;">​</a></h3><p>将 Matcher 标记为 <strong>仅已注册用户可用</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>此方法会向传入的 Matcher 的 Handlers 列表的开头放入一个检查已注册用户的 Handler。</p></div><h4 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>matcher</code> (<code>type[Matcher]</code>): 事件响应器。</li></ul><h4 id="返回-1" tabindex="-1">返回 <a class="header-anchor" href="#返回-1" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p>传入的事件响应器。</p><h3 id="def-get-level-by-experience-exp-int-int" tabindex="-1"><code>def get_level_by_experience(exp: int) -&gt; int</code> <a class="header-anchor" href="#def-get-level-by-experience-exp-int-int" aria-label="Permalink to &quot;`def get_level_by_experience(exp: int) -&gt; int`&quot;">​</a></h3><p>通过总经验值计算等级。</p><h4 id="参数-4" tabindex="-1">参数 <a class="header-anchor" href="#参数-4" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>exp</code> (int): 总经验值。</li></ul><h4 id="返回-2" tabindex="-1">返回 <a class="header-anchor" href="#返回-2" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p>等级。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h3 id="声明依赖" tabindex="-1">声明依赖 <a class="header-anchor" href="#声明依赖" aria-label="Permalink to &quot;声明依赖&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nonebot_plugin_larkuser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="获取用户" tabindex="-1">获取用户 <a class="header-anchor" href="#获取用户" aria-label="Permalink to &quot;获取用户&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.plugins.nonebot_plugin_larkuser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_user</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取 ID 为 1234567890 的用户</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_user(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1234567890&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>此方法不会验证用户是否存在于 Moonlark 数据库中。 MoonlarkUser 对象依赖其中属性缓存，不要长时间占有一个 MoonlarkUser 对象， 以免其属性缓存与数据库不一致。</p></div><h3 id="获取用户数据" tabindex="-1">获取用户数据 <a class="header-anchor" href="#获取用户数据" aria-label="Permalink to &quot;获取用户数据&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nickname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.get_nickname()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.get_level()</span></span></code></pre></div><h3 id="修改用户数据" tabindex="-1">修改用户数据 <a class="header-anchor" href="#修改用户数据" aria-label="Permalink to &quot;修改用户数据&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.add_vimcoin(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">114.514</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.add_experience(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1919810</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',87),l=[s];function n(d,r,c,h,p,f){return t(),a("div",null,l)}const k=e(i,[["render",n]]);export{g as __pageData,k as default};
