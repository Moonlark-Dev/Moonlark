import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.BHrE6nLq.js";const c=JSON.parse('{"title":"LarkLang - 本地化","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/larklang.md","filePath":"plugins/larklang.md"}'),h={name:"plugins/larklang.md"};function l(n,s,p,k,d,o){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="larklang-本地化" tabindex="-1">LarkLang - 本地化 <a class="header-anchor" href="#larklang-本地化" aria-label="Permalink to &quot;LarkLang - 本地化&quot;">​</a></h1><p><code>nonebot_plugin_larklang</code> 是 Moonlark 中的本地化插件，用于处理多语言支持。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>&quot;为了保证一致性，任何可以接入的地方都应该接入本地化。&quot;</p><p>——xxtg666</p></div><h2 id="语言操作类-langhelper" tabindex="-1">语言操作类 <code>LangHelper</code> <a class="header-anchor" href="#语言操作类-langhelper" aria-label="Permalink to &quot;语言操作类 `LangHelper`&quot;">​</a></h2><h3 id="init" tabindex="-1"><code>__init__</code> <a class="header-anchor" href="#init" aria-label="Permalink to &quot;`__init__`&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>初始化一个 <code>LangHelper</code> 对象。</p><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>name</code>: 插件名，对应 LarkLang 三级键中的第一级，为空时将自动从插件名获取（为插件名去掉 <code>nonebot_plugin_</code> 前缀）。</li></ul><h4 id="返回" tabindex="-1">返回 <a class="header-anchor" href="#返回" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>None</code></p><h4 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h4><ul><li><code>nonebot_plugin_larklang.exceptions.InvalidPluginNameException</code>: 获取插件名失败，且 <code>name</code> 参数为空。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>InvalidPluginNameException</code> 异常很少出现，一般来说不用处理，必要时手动传入 <code>name</code> 参数就可以了。</p></div><h3 id="text" tabindex="-1"><code>text</code> <a class="header-anchor" href="#text" aria-label="Permalink to &quot;`text`&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>获取指定键的本地化文本。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>YAML 支持多行字符串，尽量不要在代码中按行进行拆分或拼接。</p></div><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>key</code>: 键名，为 <code>xxx2.xxx3</code> 格式的字符串。</li><li><code>user_id</code>: 触发事件用户的 ID，未知时可填 <code>-1</code>。</li><li><code>args</code> 和 <code>kwargs</code>: 会直接被解包入 <code>format</code> 函数中。</li></ul><h4 id="返回-1" tabindex="-1">返回 <a class="header-anchor" href="#返回-1" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>str</code> - 经过本地化的文本。</p><h3 id="is-key-exists" tabindex="-1"><code>is_key_exists</code> <a class="header-anchor" href="#is-key-exists" aria-label="Permalink to &quot;`is_key_exists`&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_key_exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>检查当前语言库中是否能够获取指定键。</p><h4 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>key</code>: 键名，为 <code>xxx2.xxx3</code> 格式的字符串。</li><li><code>user_id</code>: 用户 ID。</li></ul><h4 id="返回-2" tabindex="-1">返回 <a class="header-anchor" href="#返回-2" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>bool</code> - 如果键存在则返回 <code>True</code>，否则返回 <code>False</code>。</p><h3 id="send" tabindex="-1"><code>send</code> <a class="header-anchor" href="#send" aria-label="Permalink to &quot;`send`&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, matcher: Matcher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matcher(), at_sender: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reply_message: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>向当前事件响应会话发送文本。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>假设 <code>matcher</code> 是一个 <code>Matcher</code>，<code>lang</code> 是一个 <code>LangHelper</code>，<code>user_id</code> 为一个用户 ID 字符串，那么此时：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matcher.send(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa.bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">at_sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>和</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa.bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id)</span></span></code></pre></div><p>等效。</p></div><h4 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>key</code>: 本地化键名，为 <code>xxx2.xxx3</code> 格式的字符串。</li><li><code>user_id</code>: 用户 ID。</li><li><code>matcher</code>: 对应事件的事件响应器。</li><li><code>at_sender</code>: 是否在消息的开头提及发送者。</li><li><code>reply_message</code>: 是否回复对应消息。</li><li><code>args</code> 和 <code>kwargs</code>: 参数会被解包到 <code>lang.text</code> 中。</li></ul><h4 id="返回-3" tabindex="-1">返回 <a class="header-anchor" href="#返回-3" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>None</code></p><h4 id="异常-1" tabindex="-1">异常 <a class="header-anchor" href="#异常-1" aria-label="Permalink to &quot;异常&quot;">​</a></h4><p>与 <code>Matcher().send</code> 可能出现的异常相同（<code>ActionFailed</code> 或 <code>NetworkError</code>）。</p><h3 id="finish" tabindex="-1"><code>finish</code> <a class="header-anchor" href="#finish" aria-label="Permalink to &quot;`finish`&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> finish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, matcher: Matcher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matcher(), at_sender: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reply_message: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>发送一条本地化消息并结束事件响应器。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>假设 <code>matcher</code> 是一个 <code>Matcher</code>，<code>lang</code> 是一个 <code>LangHelper</code>，<code>user_id</code> 为一个用户 ID 字符串，那么此时：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matcher.finish(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa.bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">at_sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>和</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.finish(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa.bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id)</span></span></code></pre></div><p>等效。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>此方法会抛出 <code>FinishedException</code> 并结束当前事件响应。</p></div><h4 id="参数-4" tabindex="-1">参数 <a class="header-anchor" href="#参数-4" aria-label="Permalink to &quot;参数&quot;">​</a></h4><p>与 <code>LangHelper().send</code> 相同。</p><h4 id="返回-4" tabindex="-1">返回 <a class="header-anchor" href="#返回-4" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>None</code></p><h4 id="异常-2" tabindex="-1">异常 <a class="header-anchor" href="#异常-2" aria-label="Permalink to &quot;异常&quot;">​</a></h4><p>除 <code>Matcher().send</code> 可能出现的异常外，正常执行时将抛出 <code>FinishedException</code>。</p><h3 id="reply" tabindex="-1"><code>reply</code> <a class="header-anchor" href="#reply" aria-label="Permalink to &quot;`reply`&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>回复消息。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>假设 <code>lang</code> 为 <code>LangHelper</code>，<code>user_id</code> 为用户 ID，那么：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx2.xxx3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reply_message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">at_sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>和</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.reply()</span></span></code></pre></div><p>等效。</p></div><h4 id="参数-5" tabindex="-1">参数 <a class="header-anchor" href="#参数-5" aria-label="Permalink to &quot;参数&quot;">​</a></h4><p>与 <code>LangHelper().text</code> 相同。</p><h4 id="返回-5" tabindex="-1">返回 <a class="header-anchor" href="#返回-5" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>None</code></p><h4 id="异常-3" tabindex="-1">异常 <a class="header-anchor" href="#异常-3" aria-label="Permalink to &quot;异常&quot;">​</a></h4><p>与 <code>LangHelper().send</code> 相同。</p><h2 id="键" tabindex="-1">键 <a class="header-anchor" href="#键" aria-label="Permalink to &quot;键&quot;">​</a></h2><p>LarkLang 的键名结构由至少二级组成。第一级会被映射到具体的文件名上，如 <code>test</code> 对应 <code>src/lang/...(具体的语言)/test.yaml</code>，一般为插件名，不包含 <code>nonebot_plugin_</code> 前缀。</p><p>第二级开始是键的位置，使用 <code>.</code> 连接。</p><h3 id="高级自定义" tabindex="-1">高级自定义 <a class="header-anchor" href="#高级自定义" aria-label="Permalink to &quot;高级自定义&quot;">​</a></h3><p>对于每个键，最常见的是直接使用字符串的缩略写法，以上文 <code>sha1.sha1</code> 为例，完整写法如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sha1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  sha1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - `</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">消息文本的 SHA1 摘要为</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}`</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    use_template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>由此可见，一个键由一个包含 <code>text</code> 和 <code>use_template</code> 字段的 <code>dict</code> 组成。</p><ul><li><code>text</code>: 具体的文本，每次获取时都将在所有项目中随机一个。</li><li><code>use_template</code>: 是否使用模板</li></ul><h3 id="模板键" tabindex="-1">模板键 <a class="header-anchor" href="#模板键" aria-label="Permalink to &quot;模板键&quot;">​</a></h3><p>模板键的三级键名为 <code>__template__</code>，对应二级键名下所有 <code>use_tempalte</code> 为 <code>True</code> 的键都会应用该模板。</p><p>应用模板操作在 <code>format</code> 之前，所有模板键的 <code>use_template</code> 选项将被忽略。</p><p>任何模板键都要包含一个 <code>{}</code> 占位符，对应文本将替换掉此占位符。</p><h3 id="列表" tabindex="-1">列表 <a class="header-anchor" href="#列表" aria-label="Permalink to &quot;列表&quot;">​</a></h3><p>键还支持以下写法，相当于 <code>text</code> 选项：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  meow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">喵~</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">喵！</span></span></code></pre></div><h2 id="语言配置文件" tabindex="-1">语言配置文件 <a class="header-anchor" href="#语言配置文件" aria-label="Permalink to &quot;语言配置文件&quot;">​</a></h2><p>这是 <code>zh_hans</code> 的配置文件，位于 <code>src/lang/zh_hans/language.toml</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">language</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;latest&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">author = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Moonlark-Dev&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">description=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Moonlark 默认语言，简体中文&quot;</span></span></code></pre></div><p>通过指令 <code>lang view zh_hans</code> 我们可以很清晰地看到每个键的含义：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>「语言详细信息」</span></span>\n<span class="line"><span>名称: zh_hans</span></span>\n<span class="line"><span>作者: Moonlark-Dev</span></span>\n<span class="line"><span>版本: latest</span></span>\n<span class="line"><span>Moonlark 默认语言，简体中文</span></span></code></pre></div>',80)]))}const g=i(h,[["render",l]]);export{c as __pageData,g as default};
