import{_ as a,c as i,o as e,ae as l}from"./chunks/framework.BHrE6nLq.js";const r=JSON.parse('{"title":"插件帮助","description":"","frontmatter":{},"headers":[],"relativePath":"quick-start/plugin-help.md","filePath":"quick-start/plugin-help.md"}'),t={name:"quick-start/plugin-help.md"};function p(n,s,h,o,d,c){return e(),i("div",null,s[0]||(s[0]=[l('<h1 id="插件帮助" tabindex="-1">插件帮助 <a class="header-anchor" href="#插件帮助" aria-label="Permalink to &quot;插件帮助&quot;">​</a></h1><p>在编写 SHA1 插件时，我们还创建了一个文件，即 <code>help.yaml</code>。</p><h2 id="这个文件有什么用" tabindex="-1">这个文件有什么用？ <a class="header-anchor" href="#这个文件有什么用" aria-label="Permalink to &quot;这个文件有什么用？&quot;">​</a></h2><p>此文件定义了此插件的帮助文本，使用 <code>help</code> 指令时会显示这些文本。</p><p>这个文件位于一个插件的根目录下，启动时会被 <a href="/plugins/help.html">LarkHelp</a> 插件读取。</p><h2 id="文件内容与结构" tabindex="-1">文件内容与结构 <a class="header-anchor" href="#文件内容与结构" aria-label="Permalink to &quot;文件内容与结构&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sha1</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  sha1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">help.description</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    details</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">help.details</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    usages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">help.usage</span></span></code></pre></div><h3 id="plugin" tabindex="-1"><code>plugin</code> <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;`plugin`&quot;">​</a></h3><blockquote><p>类型: <code>str</code></p></blockquote><p>此键为帮助文本所在的键的第一级，所有帮助文本键的一级键名需要相同。</p><p>如果此键的值为 <code>sha1</code>，那么所有帮助文本键都要在 <code>sha1.yaml</code> 中。</p><p>与插件初始化 LangHelper 时的一级键相同是最常见的做法</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>初始化 LangHelper() 时的第一个参数为一级键名，为 <code>None</code>（默认）时将获取插件名并去掉 <code>nonebot_plugin_</code> 前缀作为一级键名（这也是最常见的做法）。</p></div><h3 id="commands" tabindex="-1"><code>commands</code> <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;`commands`&quot;">​</a></h3><blockquote><p>类型: <code>dict[str, dict[str, str | list[str]]]</code></p></blockquote><p>命令的具体帮助文本，键名一般为命令名。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>此键所有值的文本都为 LarkLang 键名，与 <code>LangHelper().text</code> 等函数传入格式相同（即不包含一级键的 <code>xxx2.xxx3</code>，二级键一般为 <code>help</code>）。</p></div><h4 id="description" tabindex="-1"><code>description</code> <a class="header-anchor" href="#description" aria-label="Permalink to &quot;`description`&quot;">​</a></h4><blockquote><p>类型: <code>str</code></p></blockquote><p>简介，在命令名右边显示。</p><h4 id="details" tabindex="-1"><code>details</code> <a class="header-anchor" href="#details" aria-label="Permalink to &quot;`details`&quot;">​</a></h4><blockquote><p>类型: <code>str</code></p></blockquote><p>详细介绍，在命令名下方解释</p><h4 id="usages" tabindex="-1"><code>usages</code> <a class="header-anchor" href="#usages" aria-label="Permalink to &quot;`usages`&quot;">​</a></h4><blockquote><p>类型: <code>list[str]</code></p></blockquote><p>命令的所有用法及作用。</p><h2 id="用法编写" tabindex="-1">用法编写 <a class="header-anchor" href="#用法编写" aria-label="Permalink to &quot;用法编写&quot;">​</a></h2><p>命令用法使用符号表示信息，格式如下:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subcmd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [option] (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>cmd</code>: 命令名</li><li><code>subcmd</code>: 子命令名</li><li><code>A|B</code>: 在 A 或 B 中选择其一</li><li><code>&lt;arg&gt;</code>: 必要参数</li><li><code>[option]</code>: 可选参数</li><li><code>(message)</code>: 用法说明</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>为了用法清晰，建议将选择参数拆分为多个用法，或仅在表示选项缩写时使用选择。</p></div><h2 id="测试插件帮助" tabindex="-1">测试插件帮助 <a class="header-anchor" href="#测试插件帮助" aria-label="Permalink to &quot;测试插件帮助&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">help</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sha1</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>修改 <code>help.yaml</code> 后需要重启！</p></div>',34)]))}const u=a(t,[["render",p]]);export{r as __pageData,u as default};
