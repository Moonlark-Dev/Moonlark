import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.BHrE6nLq.js";const c=JSON.parse('{"title":"Render","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/render.md","filePath":"plugins/render.md"}'),l={name:"plugins/render.md"};function n(h,s,d,p,r,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="render" tabindex="-1">Render <a class="header-anchor" href="#render" aria-label="Permalink to &quot;Render&quot;">​</a></h1><p><code>nonebot_plugin_render</code> 用于将 src/templates 下的 jinja 模板渲染为图片。</p><div class="tip custom-block"><p class="custom-block-title">模板</p><p>Render 读取的模板储存在 <code>src/templates</code> 中，后缀为 <code>*.jinja</code>。</p><p>一个模板的格式如下：</p><div class="language-jinja vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jinja</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">{%</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">%}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">{%</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">%}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">{#</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> Your content here </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">{%</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> endblock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">%}</span></span></code></pre></div><table tabindex="0"><thead><tr><th>内容块</th><th>位置</th></tr></thead><tbody><tr><td><code>header</code></td><td>页面 <code>&lt;header&gt;</code> 末尾</td></tr><tr><td><code>body</code></td><td><code>&lt;div class=&quot;card-body&quot;&gt;</code> 内部</td></tr><tr><td><code>card</code></td><td><code>&lt;div class=&quot;card-body&quot;&gt;</code> 外部，会覆盖 <code>body</code> 块</td></tr></tbody></table><h3 id="保留变量" tabindex="-1">保留变量 <a class="header-anchor" href="#保留变量" aria-label="Permalink to &quot;保留变量&quot;">​</a></h3><ul><li><code>base</code>: 主题基模板的相对路径。</li><li><code>main_title</code>: 页面主标题。</li><li><code>footer</code>: 页面页脚（版权信息）。</li><li><code>text</code>: 本地化文本。</li></ul></div><div class="tip custom-block"><p class="custom-block-title">主题</p><p>主题基模板储存在 <code>src/templates/base</code> 中，主题列表储存在 <code>src/plugins/nonebot_plugin_render/themes.json</code> 中。</p><p>主题配置是一个 JSON 文件，格式为 <code>&quot;主题ID&quot;: &quot;主题模板相对于 src/templates 的路径&quot;</code>。</p><p>可以使用 <code>{% include &quot;xx&quot; %}</code> 块或 <code>src=xxx</code> 引入本地文件。 使用相对引入时，基路径为 <code>src/templates</code>。</p></div><h2 id="渲染模板-render-template" tabindex="-1">渲染模板 <code>render_template</code> <a class="header-anchor" href="#渲染模板-render-template" aria-label="Permalink to &quot;渲染模板 \`render_template\`&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render_template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    templates: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keys: dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cache: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>渲染模板为图片。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><code>name</code>: 模板名称</li><li><code>title</code>: 页面标题</li><li><code>user_id</code>: 用户 ID</li><li><code>templates</code>: 模板参数字典</li><li><code>keys</code>: 本地化文本字典，默认为空字典</li><li><code>cache</code>: 是否使用缓存，默认为 <code>False</code></li><li><code>resize</code>: 是否调整图片大小，默认为 <code>False</code></li></ul><h3 id="返回" tabindex="-1">返回 <a class="header-anchor" href="#返回" aria-label="Permalink to &quot;返回&quot;">​</a></h3><p><code>bytes</code> - 渲染后的图片字节数据</p><h2 id="修饰器-添加缓存创建函数-creator" tabindex="-1">（修饰器）添加缓存创建函数 <code>creator</code> <a class="header-anchor" href="#修饰器-添加缓存创建函数-creator" aria-label="Permalink to &quot;（修饰器）添加缓存创建函数 \`creator\`&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(template_name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span></code></pre></div><p>添加缓存创建函数的修饰器。</p><h3 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><code>template_name</code>: 模板名称</li></ul><h3 id="返回-1" tabindex="-1">返回 <a class="header-anchor" href="#返回-1" aria-label="Permalink to &quot;返回&quot;">​</a></h3><p>修饰器函数</p><h2 id="生成本地化文本表-generate-render-keys" tabindex="-1">生成本地化文本表 <code>generate_render_keys</code> <a class="header-anchor" href="#生成本地化文本表-generate-render-keys" aria-label="Permalink to &quot;生成本地化文本表 \`generate_render_keys\`&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate_render_keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(helper: LangHelper, user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, keys: list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) -&gt; dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:</span></span></code></pre></div><p>生成本地化文本表。</p><h3 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><code>helper</code>: 本地化助手对象</li><li><code>user_id</code>: 用户 ID</li><li><code>keys</code>: 本地化键名列表</li></ul><h3 id="返回-2" tabindex="-1">返回 <a class="header-anchor" href="#返回-2" aria-label="Permalink to &quot;返回&quot;">​</a></h3><p><code>dict[str, str]</code> - 本地化文本字典</p>`,25)]))}const E=i(l,[["render",n]]);export{c as __pageData,E as default};
