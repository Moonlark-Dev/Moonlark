import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.CBal0aa0.js";const E=JSON.parse('{"title":"LarkUID","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/uid.md","filePath":"plugins/uid.md"}'),t={name:"plugins/uid.md"},n=e(`<h1 id="larkuid" tabindex="-1">LarkUID <a class="header-anchor" href="#larkuid" aria-label="Permalink to &quot;LarkUID&quot;">​</a></h1><blockquote><p>Import 位置: <code>src.plugins.nonebot_plugins_larkuid.session</code></p></blockquote><h2 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h2><p>此插件用于从请求的 <code>Authorization</code> 头中获取用户信息。</p><blockquote><p>Moonlark 的 API 鉴泉中，<code>Authorization</code> 头的 Token 与用户是一一对应的。</p></blockquote><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>以下所有函数都返回一个依赖注入对象。在无法读取 <code>Authorization</code> 头或解析失败时，将返回 401 错误。</p></div><h3 id="def-get-user-id-default-optional-str-none-str" tabindex="-1"><code>def get_user_id(default: Optional[str] = None) -&gt; str</code> <a class="header-anchor" href="#def-get-user-id-default-optional-str-none-str" aria-label="Permalink to &quot;\`def get_user_id(default: Optional[str] = None) -&gt; str\`&quot;">​</a></h3><p>获取请求的用户 ID。</p><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>default</code> (<code>Optional[str]</code>): 默认值，如果请求头中没有 <code>Authorization</code>，则返回此值。</li></ul><h4 id="返回" tabindex="-1">返回 <a class="header-anchor" href="#返回" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>str</code> - 用户 ID。</p><h3 id="def-get-user-data-registered-bool-false-moonlarkuser" tabindex="-1"><code>def get_user_data(registered: bool = False) -&gt; MoonlarkUser</code> <a class="header-anchor" href="#def-get-user-data-registered-bool-false-moonlarkuser" aria-label="Permalink to &quot;\`def get_user_data(registered: bool = False) -&gt; MoonlarkUser\`&quot;">​</a></h3><p>获取请求的用户数据。</p><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>registered</code> (<code>bool</code>): 是否只返回已注册的用户数据，如果为 <code>True</code>，未注册用户将返回 403 错误。</li></ul><h4 id="返回-1" tabindex="-1">返回 <a class="header-anchor" href="#返回-1" aria-label="Permalink to &quot;返回&quot;">​</a></h4><p><code>MoonlarkUser</code> - 可操作用户数据。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>除了仅用于本地化，我们更推荐使用 <code>get_user_data</code> 而不是 <code>get_user_id</code>。</p></div><h3 id="声明依赖" tabindex="-1">声明依赖 <a class="header-anchor" href="#声明依赖" aria-label="Permalink to &quot;声明依赖&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> require</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nonebot_plugin_larkuid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="获取用户-id-并返回" tabindex="-1">获取用户 ID 并返回 <a class="header-anchor" href="#获取用户-id-并返回" aria-label="Permalink to &quot;获取用户 ID 并返回&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.plugins.nonebot_plugin_larkuid.session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_user_id</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fastapi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Request, FastAPI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cast</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cast(FastAPI, get_app())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/users/current/id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request: Request, user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_user_id()) -&gt; dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: user_id}</span></span></code></pre></div><h2 id="路由分配" tabindex="-1">路由分配 <a class="header-anchor" href="#路由分配" aria-label="Permalink to &quot;路由分配&quot;">​</a></h2><ul><li><code>/api</code>: 接口</li><li><code>/static</code>: 静态文件（保留）</li></ul>`,27),l=[n];function h(r,o,p,d,k,c){return i(),a("div",null,l)}const g=s(t,[["render",h]]);export{E as __pageData,g as default};
