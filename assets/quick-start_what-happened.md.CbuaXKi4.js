import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.BHrE6nLq.js";const c=JSON.parse('{"title":"发生了什么？","description":"","frontmatter":{},"headers":[],"relativePath":"quick-start/what-happened.md","filePath":"quick-start/what-happened.md"}'),t={name:"quick-start/what-happened.md"};function h(l,s,p,k,d,o){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="发生了什么" tabindex="-1">发生了什么？ <a class="header-anchor" href="#发生了什么" aria-label="Permalink to &quot;发生了什么？&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请结合 <a href="./first-plugin.html">上一章节</a> 的 SHA1 插件阅读本章节</p></div><h2 id="文件结构" tabindex="-1">文件结构 <a class="header-anchor" href="#文件结构" aria-label="Permalink to &quot;文件结构&quot;">​</a></h2><p>创建插件后，Moonlark 的目录结构类似这样：</p><blockquote><p>部分文件及目录已省略为 <code>...</code></p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zh_hans</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sha1.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugins</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nonebot_plugin_sha1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __main__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> templates</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><h3 id="src-lang" tabindex="-1"><code>src/lang/</code> <a class="header-anchor" href="#src-lang" aria-label="Permalink to &quot;\`src/lang/\`&quot;">​</a></h3><p>此目录为 <a href="/plugins/lang.html">LarkLang</a> 语言文件，每个目录为一个语言，默认语言（简体中文）为 <code>zh_hans</code>，<code>en_us</code> 和 <code>zh_tw</code> 使用 Crowdin 管理，不需要修改。</p><h3 id="src-plugins" tabindex="-1"><code>src/plugins/</code> <a class="header-anchor" href="#src-plugins" aria-label="Permalink to &quot;\`src/plugins/\`&quot;">​</a></h3><p>此目录为 Moonlark 插件目录，<code>nb-cli</code> 会从此目录加载插件</p><h3 id="src-templates" tabindex="-1"><code>src/templates/</code> <a class="header-anchor" href="#src-templates" aria-label="Permalink to &quot;\`src/templates/\`&quot;">​</a></h3><p>此目录为 Jinja 模板文件，需要搭配 <a href="/plugins/render.html">Render</a> 插件使用。</p><h2 id="插件做了什么" tabindex="-1">插件做了什么 <a class="header-anchor" href="#插件做了什么" aria-label="Permalink to &quot;插件做了什么&quot;">​</a></h2><h3 id="init-py" tabindex="-1"><code>__init__.py</code> <a class="header-anchor" href="#init-py" aria-label="Permalink to &quot;\`__init__.py\`&quot;">​</a></h3><h4 id="声明插件-元数据" tabindex="-1">声明插件 <a href="https://nonebot.dev/docs/advanced/plugin-info#%E6%8F%92%E4%BB%B6%E5%85%83%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">元数据</a> <a class="header-anchor" href="#声明插件-元数据" aria-label="Permalink to &quot;声明插件 [元数据][4]&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot.plugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PluginMetadata</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__plugin_meta__ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PluginMetadata(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nonebot-plugin-sha1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SHA1 摘要提取&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    usage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="声明插件依赖" tabindex="-1">声明插件依赖 <a class="header-anchor" href="#声明插件依赖" aria-label="Permalink to &quot;声明插件依赖&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> require</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nonebot_plugin_larklang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nonebot_plugin_larkutils&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>向NoneBot2 声明此插件依赖 <a href="/plugins/lang.html">LarkLang</a> 和 <a href="/plugins/utils.html">LarkUtils</a> 插件</p><h4 id="导入-main-py" tabindex="-1">导入 <code>__main__.py</code> <a class="header-anchor" href="#导入-main-py" aria-label="Permalink to &quot;导入 \`__main__.py\`&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __main__</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我们习惯将大型插件的内部全局变量声明和指令注册单独写入 <code>__main__.py</code> 文件。</p></div><h3 id="main-py" tabindex="-1"><code>__main__.py</code> <a class="header-anchor" href="#main-py" aria-label="Permalink to &quot;\`__main__.py\`&quot;">​</a></h3><h4 id="导入依赖" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖" aria-label="Permalink to &quot;导入依赖&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashlib</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> on_command</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot.adapters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot.params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CommandArg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot_plugin_larklang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LangHelper</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonebot_plugin_larkutils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_user_id</span></span></code></pre></div><blockquote><p>尽量避免使用通配符导入</p></blockquote><h4 id="声明指令-matcher" tabindex="-1">声明指令 <a href="https://nonebot.dev/docs/tutorial/matcher" target="_blank" rel="noreferrer">Matcher</a> <a class="header-anchor" href="#声明指令-matcher" aria-label="Permalink to &quot;声明指令 [Matcher][6]&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sha1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> on_command(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>向 NoneBot2 声明了一个 <code>sha1</code> 指令</p><h4 id="初始化-larklang" tabindex="-1">初始化 <a href="/plugins/lang.html">LarkLang</a> <a class="header-anchor" href="#初始化-larklang" aria-label="Permalink to &quot;初始化 [LarkLang][2]&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LangHelper()</span></span></code></pre></div><p>LarkLang 会自动读取插件名并将该 LangHelper 文件对应到 <code>sha1.yaml</code>，此 LangHelper 对象仅能读取 <code>sha1.yaml</code> 的键。</p><p>在 LarkLang 中，插件名开头的 <code>nonebot_plugin_</code> 会被删除。</p><h4 id="声明响应器处理函数" tabindex="-1">声明响应器处理函数 <a class="header-anchor" href="#声明响应器处理函数" aria-label="Permalink to &quot;声明响应器处理函数&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@sha1.handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: Message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CommandArg(), user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_user_id()) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message.extract_plain_text()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sha1sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashlib.sha1(text.encode()).hexdigest()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.finish(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha1.sha1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id, sha1sum)</span></span></code></pre></div><blockquote><p>我们将这个函数称为 Handler，所有 Handler 都是异步函数。</p></blockquote><h2 id="有关此-handler-函数的参数" tabindex="-1">有关此 Handler 函数的参数 <a class="header-anchor" href="#有关此-handler-函数的参数" aria-label="Permalink to &quot;有关此 Handler 函数的参数&quot;">​</a></h2><p>在这个函数中，使用 <a href="https://nonebot.dev/docs/tutorial/event-data" target="_blank" rel="noreferrer">NoneBot2 的依赖注入功能获取参数</a>。</p><h3 id="message-message-commandarg" tabindex="-1"><code>message: Message = CommandArg()</code> <a class="header-anchor" href="#message-message-commandarg" aria-label="Permalink to &quot;\`message: Message = CommandArg()\`&quot;">​</a></h3><p>这个参数使用了 NoneBot2 内置的依赖注入函数，获取指令的参数。</p><p>假设用户在 QQ 使用了 <code>sha1 114514</code>，那么这个指令的参数是 <code>114514</code>，此时 <code>message</code> 参数的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Message(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;114514&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>此 Message 为 <code>nonebot.adapters.onebot.v11.Message</code>，非 <code>nonebot.adapters.Message</code>，具体类型会根据消息来源变化，但始终为 <code>nonebot.adapters.Message</code> 的子类</p></div><h3 id="user-id-str-get-user-id" tabindex="-1"><code>user_id: str = get_user_id()</code> <a class="header-anchor" href="#user-id-str-get-user-id" aria-label="Permalink to &quot;\`user_id: str = get_user_id()\`&quot;">​</a></h3><p><code>get_user_id()</code> 为 <a href="/plugins/utils.html">LarkUtils</a> 提供的依赖注入函数，返回一个 <code>str</code>。</p><div class="danger custom-block"><p class="custom-block-title">IMPORTANT</p><p>无论如何，请使用此函数获取触发事件主体的用户 ID。</p></div><h2 id="此-handler-函数做了什么" tabindex="-1">此 Handler 函数做了什么 <a class="header-anchor" href="#此-handler-函数做了什么" aria-label="Permalink to &quot;此 Handler 函数做了什么&quot;">​</a></h2><p>我们假设，用户 ID 为 <code>1145141919810</code> 的用户使用了 <code>sha1 114514</code>。</p><p>此时，Handler 函数的参数值如下：</p><ul><li><code>message</code>: <code>Message(&quot;114514&quot;)</code></li><li><code>user_id</code>: <code>&quot;1145141919810&quot;</code></li></ul><h3 id="获取消息纯文本" tabindex="-1">获取消息纯文本 <a class="header-anchor" href="#获取消息纯文本" aria-label="Permalink to &quot;获取消息纯文本&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message.extract_plain_text()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># text: &quot;114514&quot;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>使用 <code>extract_plain_text</code> 获取 <code>Message</code> 对象的纯文本，会丢掉所有非 <code>text</code> 消息段，我们建议使用 <a href="https://github.com/nonebot/plugin-alconna" target="_blank" rel="noreferrer">Alconna</a> 插件来实现非 Text 参数消息段的有关功能。</p></div><h3 id="计算-sha1-摘要并获取纯文本" tabindex="-1">计算 SHA1 摘要并获取纯文本 <a class="header-anchor" href="#计算-sha1-摘要并获取纯文本" aria-label="Permalink to &quot;计算 SHA1 摘要并获取纯文本&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sha1sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashlib.sha1(text.encode()).hexdigest()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># sha1sum: &quot;2c8509df0df65f9826dc872a9acfea532c1f53c7&quot;</span></span></code></pre></div><h3 id="发送消息" tabindex="-1">发送消息 <a class="header-anchor" href="#发送消息" aria-label="Permalink to &quot;发送消息&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lang.finish(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha1.sha1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user_id, sha1sum)</span></span></code></pre></div><p>在这里，我们调用了 <code>lang.finish</code> 函数，由于 LangHelper 已绑定 <code>sha1.yaml</code>，LarkLang 会获取用户 <code>user_id: &quot;1145141919810&quot;</code> 的语言设置并在对应语言的 <code>sha1.yaml</code> 文件中查找 <code>sha1.sha1</code> 键的对应值，即 <code>&quot;消息文本的 SHA1 摘要为: {}&quot;</code>，随后使用 <code>format</code> 函数将剩下的变量 <code>sha1sum</code> 替换其中的 <code>{}</code> 值，替换后的文本为 <code>&quot;消息文本的 SHA1 摘要为: 2c8509df0df65f9826dc872a9acfea532c1f53c7&quot;</code>，随后这个文本会被发送并结束事件响应。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>Langhelp().finish</code> 调用了 <code>Matcher().finish</code> 进行消息发送，会触发 <code>FinishedException</code> 并结束当前事件响应流程。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>LarkLang 的键由三层组成，即 <code>xxx1.xxx2.xxx3</code>。</p><p>第一级为插件名，对应语言文件夹下的 <code>xxx1.yaml</code> 文件，会在 LangHelper 对象实例化时绑定。</p><p>在使用 <code>LangHelper().finish</code> 或其他有关函数的时候只需要传入后两级，即 <code>xxx2.xxx3</code>。</p></div><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p><a href="./plugin-help.html">插件帮助</a></p>`,62)]))}const g=a(t,[["render",h]]);export{c as __pageData,g as default};
